/*
 * Copyright 2012-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *  Patrick Double
 *  patrick.double@objectpartners.com or pat@patdouble.com
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bmuschko:gradle-clover-plugin:2.2.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
    }
}

plugins {
    id 'ru.vyarus.quality' version '2.4.0'
    id 'codenarc'
    id 'nebula.lint' version '9.1.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

version "4.0.2.${new Date().format('yyyyMMddHHmmss', TimeZone.getTimeZone('UTC'))}"
group "org.grails.plugins"
description "The Cookie Session plugin enables grails applications to store session data in http cookies between requests instead of in memory on the server."

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: 'com.bmuschko.clover'
apply plugin: 'org.sonarqube'

ext {
    grailsVersion = project.grailsVersion
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    provided 'org.springframework.boot:spring-boot-starter-logging'
    provided "org.springframework.boot:spring-boot-autoconfigure"

    profile "org.grails.profiles:web-plugin"
    provided "org.codehaus.groovy:groovy-all:2.4.15:indy"
    provided "org.grails:grails-web-boot"
    provided "org.grails:grails-dependencies"
    provided 'org.grails.plugins:spring-security-core:3.1.2'
    provided 'javax.servlet:javax.servlet-api:3.1.0'

    testCompile "org.grails:grails-plugin-testing"

    clover 'org.openclover:clover:4.2.1'

    console "org.grails:grails-console"

    compile group: "com.esotericsoftware", name: "kryo-shaded", version: "4.0.2"
    compile(group: "de.javakaffee", name: "kryo-serializers", version: "0.42") {
        exclude module: 'kryo' // we want kryo-shaded as above
    }
    compile group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.7.2'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
}

bootRepackage.enabled = false

compileGroovy {
    groovyOptions.optimizationOptions.indy = true
}

// hack for Gradle 4
jar {
    def expected = new File("${project.sourceSets.main.output.classesDir}/META-INF/grails-plugin.xml")
    def actual = new File(expected.absolutePath.replace('/java/', '/groovy/'))

    outputs.file(expected)
    doLast {
        logger.info "grails-plugin.xml hack, actual = ${actual}, expected = ${expected}"
        if (actual.exists() && !expected.exists()) {
            expected.parentFile.mkdirs()
            expected.text = actual.text
        }
    }
}

grailsPublish {
    githubSlug = 'double16/grails-cookie-session'
    license {
        name = 'Apache-2.0'
    }
    title = 'cookie-session'
    desc = project.description
    developers = [double16: 'Patrick Double', benlucchesi: 'Ben Lucchesi']
    websiteUrl = 'https://github.com/double16/grails-cookie-session'
    issueTrackerUrl = 'https://github.com/double16/grails-cookie-session/issues'
    vcsUrl = 'https://github.com/double16/grails-cookie-session.git'

    if (version ==~ /.*\.\d\d\d\d\d\d\d\d\d\d\d\d\d\d$/) {
        repo = 'plugins-snapshots'
    }
}

bintray {
    pkg {
        publicDownloadNumbers = true
        githubRepo = 'double16/grails-cookie-session'
        githubReleaseNotesFile = 'CHANGELOG.md'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
            Node pomNode = asNode()
            pomNode.dependencies.'*'.findAll() {
                it.artifactId.text() in ['spring-security-core', 'javax.servlet-api']
            }.each() {
                it.parent().remove(it)
            }
            }
        }
    }
}

quality {
    codenarc = true
    checkstyle = false
    pmd = false
    findbugs = false
}

codenarc {
    maxPriority2Violations = Integer.MAX_VALUE
    maxPriority3Violations = Integer.MAX_VALUE
}

clover {
    targetPercentage = '85%'
    report {
        xml = true
        json = true
        html = true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', System.getenv('SONARQUBE_ORG')
        property 'sonar.login', System.getenv('SONARQUBE_LOGIN')
        property 'sonar.sources', ['src/main/groovy']
        property 'sonar.tests', ['src/test/groovy']
        properties['sonar.clover.reportPaths'] += cloverGenerateReport.reportsDir.absolutePath
    }
}

tasks.sonarqube.dependsOn cloverGenerateReport

def createGrailsModuleTask(String version, String taskName) {
    tasks.create(name: "${taskName}${version}", type: Exec, group: 'verification') {
        dependsOn publishToMavenLocal
        workingDir "grails${version}"
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', 'gradlew.bat', taskName
        } else {
            commandLine './gradlew', taskName
        }
    }
}

List<String> versions = [
    '3_0', '3_0_nosec',
    '3_1', '3_1_nosec',
    '3_2', '3_2_nosec',
    '3_3', '3_3_nosec',
]

task testAll(group: 'verification') {
    dependsOn test
    dependsOn publishToMavenLocal
    dependsOn(versions.collect { createGrailsModuleTask(it, 'test') })
}

task integrationTestAll(group: 'verification') {
    dependsOn publishToMavenLocal
    dependsOn(versions.collect { [
        createGrailsModuleTask(it, 'integrationTest'),
        createGrailsModuleTask(it, 'integrationTestDisabled'),
        createGrailsModuleTask(it, 'integrationTestSSL'),
    ]}.flatten())
}

task cleanAll(group: 'build') {
    dependsOn test
    dependsOn publishToMavenLocal
    dependsOn(versions.collect { createGrailsModuleTask(it, 'clean') })
}
